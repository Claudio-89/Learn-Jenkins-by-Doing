############################
Builds and Build Management
############################
You have installed jenkins but you want to be sure that the installation is working before you present it to your boss. You have decided that the best way to do this is to have jenkins run a project that outputs the version of Linux tha it is runnign on as well as the user that it is running build as. You are going to place this in a folder named Test and output a file called shelltest.txt

Create a folder named Test

In the dashboard click on create item, from there enter "Test" at the top of the page and then click "folder" and then "ok"

Create a user test job that saves it output in a file "user_test.txt"

in the folder you created, go to new item on the left, then name the item user_test and then click "freestyle project" and then "ok" In the job configuration page in the build step, click execute shell, then in the text box type uname -a && whoami > user_test.txt then click save.

Then click build on the left, Then click workspace and locate the file, view the contets of the file by clicking view on the page. This should result in the username 'jenkins'

##################
Building from SCM
##################
In this lab we configure Maven to perform a build. This includes pulling the source code for the build from SCM. At the end of the build process, we also create an artifact for the build.

"SCM overview: In Jenkins, SCM stands for "Source Code Management". This option instructs Jenkins to obtain your Pipeline from Source Control Management (SCM), which will be your locally cloned Git repository."

"Maven overview: Maven is a tool that is used to compile your code. And not only compile it can validate your code, install a package and can even analyse the test-cases in your code. You can install Maven plugin in Jenkins."

Configure Maven Installer
Use a browser to navigate to the provided public IP address for the server. Remember to add ":8080" to the end of the IP address to specify the default Jenkins port.

Log in with the credentials provided in the lab guide instructions.

Click Manage Jenkins.

Click Global Tool Configuration.

Under Maven installations, click Add Maven.

In the Name box, enter "M3".

Make sure Install automatically is checked.

Click Save.

Configure the Build to Use Maven and Make the Index File
Click New Item.

Enter an item name of "mavenproject" in the box provided.

Select Freestyle project.

Click OK.

Click the Source Code Management tab at the top of the screen.

Select the option for a Git repository.

Copy the git repository link from the lab instructions and enter it into the Repository URL box.

Click the Build tab at the top of the screen.

Click Add build step and select the Invoke top-level Maven targets option.

Under Maven Version, select M3.

In the Goals box, enter "clean package".

Click Add build step and select the Execute shell option.

In the Command window, enter "bin/makeindex".

Click Add post-build action and select the Archive the artifacts option.

Inside the Archive the artifacts box, click Advanced...

Check the option for Fingerprint all archived artifacts.

In the Files to archive box, enter "index.jsp".

Click Save.

Click Build Now.

Refresh the window and click the View link next to index.jsp. Verify the contents of the index.jsp file.

#####################
Distributing a Build
#####################
It has been determined that the resources that are being used for the maven build from M3 need to be reduced and that it would be better if the project was built on more robust hardware, this means that you will need to take the build and make it a distributed build using the provided slave node. This node is not configured and must be setup to perform the build. The freestyle project should be configured to ensure that the build is only run on slave1. The shell bin/makeindex should be run and the index.jsp needs to be archived. Remember that the jenkins user will need to be added to the slave, keyed to the slave instance and given sudo nopasswd access. The freestyle project name must be mavenproject

Configure the slave machine for use with the Jenkins master.

You will need to modify the /etc/passwd file on the master to allow the Jenkins user a shell login. You will need to add a password to the jenkins user so that you are able to su to that user. Once this is done su to the jenkins user and ssh-keygen. Then as the Jenkins user ssh to the slave machine. Create a jenkins user, add them to sudoers and create the entery with noapsswd Exchange the jenkins users ssh keys with the slave server. Verify that key login is working on the slave server.

Run the maven build on the remote agent

Creat a maven installation named M3 from manage jenkins manage nodes setup the remote node. Label the node slave1 create a freestyle project named mavenproject that is set to run only on slave 1 configure it to use M3 maven install. create a shell build step to run bin/makeindex archive the index.jsp and ensure the it gets fingerprinted.

###############################################
Building an App as a Freestyle Jenkins Project
###############################################
The team has asked us to configure a Jenkins project to build the train-schedule app. The source code for the application is hosted in the GitHub repository. The app already has build automation set up using gradle wrapper, and can be built with ./gradlew build. The team wants Jenkins to execute this automated build every time changes are pushed to the GitHub repository.

Logging In
We're going to be landing on a public GitHub repository (linked to above) and creating a new fork, using our own personal GitHub account. To configure Jenkins though, the use the credentials and IP provided in the hands-on lab overview page to log into our Jenkins server.

Fork the Existing GitHub Repository
Using the link provided a little earlier, get into the repository and click on the Fork button in the upper right. This will give us our own personal fork. Once that's done, we'll find ourselves sitting in the new fork's GitHub page.

Now we've got to create an API key that will allow Jenkins to interact with GitHub. Let's click on our profile picture (in the way upper right of the screen) and select Settings from the menu that drops down. In the next screen, click on Developer settings, a button that's on the lower left part of the screen. Now we can click on Personal access tokens in the left-hand menu of this page.

Click the Generate new token button in the upper-right of the screen. We'll have to fill out some information on the next page:

Token description: Give it something descriptive (jenkins is a good idea)
Check admin:repo_hook
Click Generate token at the bottom of the page.
Now we're taken to a screen with the actual token. Copy this string, because we'll need it later.

Jenkins Configuration
Use the public IP and credentials on the hands-on lab overview page to log into our Jenkins server. Remember to tag :8080 (port 8080) to the end of the IP address in the browser.

Once we've logged in, click Manage Jenkins in the left-hand menu. On this next screen, a little ways down, click on the Configure System link (it's got a gear icon next to it) and we'll be able to set up the communication with Github.

On the next screen, scroll down a bit to the GitHub section. Click on the Add GitHub Server dropdown, and select GitHub Server from the list. A web form will appear. Give this a Name of github. We can leave API URL alone, but we need to put some credentials in. Click the Add dropdown, select Jenkins, and we'll see a window pop out with a form we've got to fill in. With this next form section, click the Kind dropdown and select Secret text. We're going to paste the token we copied earlier (when we generated it in GitHub) into the Secret field. Give it an ID of github_key, and a Description of GitHub Key. Click the Add button. Back on the Configure System screen, we've got to now select that GitHub Key we just created, from the Credentials dropdown.

Leave Manage hooks checked, and click Test connection over on the right, to make sure GitHub and Jenkins are communicating. We'll get a "Credentials are verified" message, and click the Save button (you may have to scroll down to see it). Now we can move along.

Create a New Jenkins Freestyle Project Called train-schedule
Jenkins is all set for the most part, but now we've got to actually create a project. We need the URL of our personal fork of the cicd-pipeline-train-schedule-jenkins, so just flip back over in the web browser and copy it real quick.

In Jenkins, click on New Item. Give it an item name of train-schedule, and select Freestyle project. Then click the OK button.

In this next screen, we've got to check GitHub project, and paste the URL we got from GitHub earlier into the Project url box. In the Source Code Management section, select Git and paste that same URL into the Repository URL box. We can leave Credentials alone.

In the next section, Build Triggers, check the GitHub hook trigger for GITScm polling box.

Next we've got to set up build steps. Down in the Build section, click the Add build step dropdown and select Invoke Gradle script from the list. Select Use Gradle Wrapper from the new list the shows up, and fill in the Tasks part of the form to say build.

Scroll down a bit and click on the Add post-build action dropdown. Select Archive the artifacts from the list that pops up. Now we've got a Files to archive form field that we need to fill in. Type dist/trainSchedule.zip in there.

Click Save, and back out at the main project screen click Build now to see if everything is working.

In the lower part of the left-hand menu, we can see our build progressing. Click on the #1 next to our current build, and we can then click on Console Output (in this screen's left-hand menu) to watch as things area actually happening during the process.

This first build is going to take a while, because it's having to go out and download things. Subsequent builds should be much quicker.

Trigger a Successful train-schedule Build with a Change in GitHub
Once the train-schedule project is fully configured, let's make a change to the source code in our GitHub fork. This should trigger a successful build of the train-schedule project. Making a change can mean making any change to any file in the repository.

Let's click on the README.md file, then once it's open click the pencil icon. We can add any text we want, just something down at the end of the file.

Once we click the Commit Changes button, it should trigger a new build. If we head back over to the Jenkins page, we should see a #2 job that fired off. Notice that this one didn't take so long? Most of the heavy lifting was done in the first build, and this one only incorporated the change we made to the README.md file.
